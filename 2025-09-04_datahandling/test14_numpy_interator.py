# next 메소드를 통해서 데이터 처음부터 끝까지 
# 순차적으로 읽어드리는 방법을 제공

import numpy as np # numpy 라이브러리를 np라는 별칭으로 가져옵니다. 데이터 분석 및 수치 연산에 필수적인 라이브러리입니다.

# 2x4 형태의 2차원 numpy 배열 A를 생성합니다. 이 배열은 순회할 데이터 소스입니다.
A = np.array([[10,20,30,40],[50,60,70,80]]) 

'''
# numpy 배열 A에 대한 반복자(iterator) 'it'을 생성합니다.
# 'flags=['multi_index']'는 반복 중에 다차원 인덱스(예: (0,0), (0,1))를 추적하도록 설정합니다.
# 'op_flags=['readwrite']'는 배열의 요소를 읽고 쓸 수 있도록 설정합니다.
'''
it = np.nditer(A, flags=['multi_index'], op_flags=['readwrite'])

'''
반복자가 배열의 끝에 도달할 때까지 루프를 실행합니다. 'it.finished'는 모든 요소를 순회했는지 여부를 나타내는 속성입니다.
현재 위치의 다차원 인덱스를 'idx' 변수에 저장합니다.
현재 인덱스와 해당 인덱스에 위치한 배열 A의 값을 출력합니다.
'it.iternext()' 메소드를 호출하여 반복자를 다음 요소로 이동시킵니다.
'''

while not it.finished:
  
    idx = it.multi_index
    print('index =>', idx, ' , value =>', A[idx])
    it.iternext()


'''
flags와 op_flags는 numpy.nditer 함수에서 매우 의미 있는
  매개변수 이름입니다. 각 이름은 이터레이터(iterator)의 동작
  방식을 제어하는 특정 옵션 그룹을 나타냅니다.

  flags (플래그)

   - 의미: 이터레이터 자체의 전반적인 동작 방식이나 상태를 
     제어하는 옵션들의 집합입니다.
   - 비유: 책을 읽을 때 "각 줄마다 줄 번호를 함께 기억할지" 또는        
     "책을 거꾸로 읽을지"와 같이 읽는 방법에 대한 규칙을 정하는
     것과 같습니다.
   - 예시:
       - 'multi_index': 이터레이션 중에 현재 요소의 다차원
         인덱스(예: (0, 1))를 추적하도록 설정합니다.
       - 'external_loop': 한 번에 여러 요소를 처리하여 루프의
         성능을 향상시킬 때 사용합니다.

  op_flags (Operand Flags, 피연산자 플래그)

   - 의미: 이터레이션 대상이 되는 배열(피연산자, operand)에 대해        
     수행할 수 있는 작업(읽기/쓰기) 권한을 지정하는 옵션입니다.
   - 비유: 책을 읽을 때 "눈으로 읽기만 할지(readonly)" 또는
     "연필로 메모나 수정을 하면서 읽을지(readwrite)"와 같이 책의        
     내용에 어떤 작업을 할 수 있는지 권한을 정하는 것과 같습니다.       
   - 예시:
       - 'readonly': 배열의 데이터를 읽기만 가능합니다.
       - 'readwrite': 배열의 데이터를 읽고 쓸 수 있습니다.
       - 'writeonly': 배열의 데이터를 쓰기만 가능합니다.

  간단히 요약하면 다음과 같습니다.

   - flags: 이터레이터의 동작 방식 설정
   - op_flags: 배열 데이터에 대한 접근 권한 설정
'''