#행렬곱 np.dot(A,B)
import numpy as np

A = np.array([[1,2,3,],[4,5,6]])
B = np.array([[-1,-2],[-3,-4],[-5,-6]])

C = np.dot(A,B) #행렬 곱 수행

print("A.shape==",A.shape,"B.shape==",B.shape)
print("C.shape==",C.shape)
print(C)

'''
[행렬 곱셈의 조건]
행렬 곱셈(내적)을 위해서는 첫 번째 행렬(A)의 열의 수와 두 번째 행렬(B)의 행의 수가 같아야 합니다.
A의 형태는 (2, 3)이고 B의 형태는 (3, 2)입니다. A의 열(3)과 B의 행(3)이 일치하므로 행렬 곱이 가능합니다.
결과 행렬 C의 형태는 (A의 행, B의 열) = (2, 2)가 됩니다.

---

행렬 A와 B의 곱(내적) C가 계산되는 과정은 다음과 같습니다.

A = [[1, 2, 3],
     [4, 5, 6]]

B = [[-1, -2],
     [-3, -4],
     [-5, -6]]

결과 행렬 C는 (2x3) * (3x2) = (2x2) 행렬이 됩니다.
C = [[C(1,1), C(1,2)],
     [C(2,1), C(2,2)]]

각 요소의 계산 과정:

C(1,1) = A의 1행 * B의 1열
       = (1 * -1) + (2 * -3) + (3 * -5)
       = -1 - 6 - 15
       = -22

C(1,2) = A의 1행 * B의 2열
       = (1 * -2) + (2 * -4) + (3 * -6)
       = -2 - 8 - 18
       = -28

C(2,1) = A의 2행 * B의 1열
       = (4 * -1) + (5 * -3) + (6 * -5)
       = -4 - 15 - 30
       = -49

C(2,2) = A의 2행 * B의 2열
       = (4 * -2) + (5 * -4) + (6 * -6)
       = -8 - 20 - 36
       = -64

따라서 최종 결과 행렬 C는 다음과 같습니다.
C = [[-22, -28],
     [-49, -64]]
'''
